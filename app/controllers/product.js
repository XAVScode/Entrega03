const utils = require('./utils');

class ProductException {
    constructor(errorMessage) {
        this.errorMessage = errorMessage;
    }
}

class Product {
    constructor(title, description, imageURL, unit, stock, pricePerUnit, category) {
        this.uuid = utils.generateUUID();
        this.title = title;
        this.description = description;
        this.imageURL = imageURL;
        this.unit = unit;
        this.stock = stock;
        this.pricePerUnit = pricePerUnit;
        this.category = category;
    }


    set setUuid(value) {
        throw new ProductException("Product uuids are auto-generated");
    }

    get getUuid() {
        return this._uuid;
    }

    set setTitle(value) {
        if (!value || typeof (value) != "string")
            throw new ProductException("Product title must not be empty");
        this.title = value;
    }

    get getTitle() {
        return this.title;
    }

    set setDescription(value) {
        if (!value || typeof (value) != "string")
            throw new ProductException("Product description must not be empty");
        this.description = value;
    }

    get getDescription() {
        return this.description;
    }

    set setImageURL(value) {
        if (!value || typeof (value) != "string")
            throw new ProductException("ProductURL must not be empty");
        this.imageURL = value;
    }

    get getImageURL() {
        return this.imageURL;
    }

    set setUnit(value) {
        if (!value || typeof (value) != "string")
            throw new ProductException("Product Unit must not be empty");
        this.unit = value;
    }

    get getUnit() {
        return this.unit;
    }

    set setStock(value) {
        if (typeof (value) != "number")
            throw new ProductException("Product Stock must be a Number");
        else if (value < 0)
            throw new ProductException("Product Stock cant be negative");
        this.stock = value;
    }

    get getStock() {
        return this.stock;
    }

    set setPricePerUnit(value) {
        if (typeof (value) != "number")
            throw new ProductException("Product Stock must be a Number");
        else if (value < 0)
            throw new ProductException("Product Stock cant be negative");
        this.pricePerUnit = value;
    }

    get getPricePerUnit() {
        return this.pricePerUnit;
    }

    set setCategory(value) {
        if (!value || typeof (value) != "string")
            throw new ProductException("Product Category must not be empty");
        this.category = value;
    }

    get getCategory() {
        return this.category;
    }

    static createFromJson(jsonValue) {
        let jsonObj = JSON.parse(jsonValue);
        if ("uuid" in jsonObj)
            throw new ProductException("uuids are autogenerated")

        const product = new Product("", "", "", "", 0, 0, "")
        product.setTitle = jsonObj.title;
        product.setDescription = jsonObj.description;
        product.setImageURL = jsonObj.imageURL;
        product.setUnit = jsonObj.unit;
        product.setStock = jsonObj.stoc;
        product.setPricePerUnit = jsonObj.pricePerUnit;
        product.setCategory = jsonObj.category;
        return product;
    }

    static createFromObject(object) {
        const product = new Product("", "", "", "", 0, 0, "")
        // Se crea un producto vacio para usar las condiciones de setters
        if ("uuid" in object)
            throw new ProductException("uuids are autogenerated");

        const { title, description, imageURL, unit, stock, pricePerUnit, category } = object
        product.setTitle = title;
        product.setDescription = description
        product.setImageURL = imageURL
        product.setUnit = unit;
        product.setStock = stock;
        product.setPricePerUnit = pricePerUnit;
        product.setCategory = category;
        return product;
    }

    static cleanObject(object) {
        const keys = ["uuid", "title", "description", "imageURL", "unit", "stock", "pricePerUnit", "category"];
        const obj = {};

        for (const element of keys) {
            if (object.hasOwnProperty(element)) {
                obj[element] = object[element];
            }
        }
        return obj;
    }
}

module.exports = Product;